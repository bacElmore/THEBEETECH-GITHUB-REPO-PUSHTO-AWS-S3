# -*- toml -*-

[global_tags]
[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = "CerboGX-Rasp"
  omit_hostname = false
[[outputs.influxdb_v2]]
  urls = ["http://192.168.1.217:8086"]
  bucket = "influx"
  token = "HYXF_mKWJgJz-MYHjloqDG6ZK3b_FuPZkYPiO93FwNl2WznZ2zPTUK-_76tS8iMHXzO0Yi-AN1Y5x02DewUWmA=="
  timeout = "5s"
  organization = "BacHome"
  #username = "bactran"
  #password = "backhung"


 # Retrieve data from MODBUS slave devices
[[inputs.modbus]]
  ## Connection Configuration
  ##
  ## The plugin supports connections to PLCs via MODBUS/TCP, RTU over TCP, ASCII over TCP or
  ## via serial line communication in binary (RTU) or readable (ASCII) encoding
  ##
  ## Device name
  name = "Device"

  ## Slave ID - addresses a MODBUS device on the bus
  ## Range: 0 - 255 [0 = broadcast; 248 - 255 = reserved]
  slave_id = 239

  ## Timeout for each request
  timeout = "1s"

  ## Maximum number of retries and the time to wait between retries
  ## when a slave-device is busy.
  busy_retries = 1
  busy_retries_wait = "100ms"

  # TCP - connect via Modbus/TCP
  controller = "tcp://192.168.10.195:502"

  ## Define the configuration schema
  ##  |---register -- define fields per register type in the original style (only supports one slave ID)
  ##  |---request  -- define fields on a requests base
  configuration_type = "register"

  ## Analog Variables, Input Registers and Holding Registers
  ## measurement - the (optional) measurement name, defaults to "modbus"
  ## name        - the variable name
  ## byte_order  - the ordering of bytes
  ##  |---AB, ABCD   - Big Endian
  ##  |---BA, DCBA   - Little Endian
  ##  |---BADC       - Mid-Big Endian
  ##  |---CDAB       - Mid-Little Endian
  ## data_type   - INT8L, INT8H, UINT8L, UINT8H (low and high byte variants)
  ##               INT16, UINT16, INT32, UINT32, INT64, UINT64,
  ##               FLOAT16-IEEE, FLOAT32-IEEE, FLOAT64-IEEE (IEEE 754 binary representation)
  ##               FLOAT32, FIXED, UFIXED (fixed-point representation on input)
  ## scale       - the final numeric variable representation
  ## address     - variable address

  holding_registers = [
    { name = "Bat - Voltage", byte_order = "AB",   data_type = "UINT16", scale=10.0,  address = [771]},
    { name = "Bat - Current", byte_order = "AB",   data_type = "INT16", scale=100.0,   address = [772]},
    { name = "Bat - Temp", byte_order = "AB",   data_type = "INT16", scale=0.1,   address = [773]},
    { name = "PV - Power", byte_order = "AB",   data_type = "INT16", scale=0.1,   address = [789]},
  ]
  ##input_registers = [
  ##  { name = "tank_level",   byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [0]},
  ##  { name = "tank_ph",      byte_order = "AB",   data_type = "INT16",   scale=1.0,     address = [1]},
  ##  { name = "pump1_speed",  byte_order = "ABCD", data_type = "INT32",   scale=1.0,     address = [3,4]},
  ##]

 